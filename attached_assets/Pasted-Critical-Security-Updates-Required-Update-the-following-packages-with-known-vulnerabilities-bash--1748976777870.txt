Critical Security Updates Required

Update the following packages with known vulnerabilities:

bash# Critical security updates
npm update axios@^1.7.7  # Update from 1.8.4 (fix prototype pollution vulnerability)
npm update ws@^8.17.1    # Update from 8.18.1 (fix ReDoS vulnerability)
npm update express@^4.21.1  # Update from 4.21.2 (dependency security fixes)
Major Version Updates Needed

Update these packages to their latest stable versions:

bash# Authentication & Security
npm install @azure/identity@^4.5.0
npm install @azure/keyvault-secrets@^4.9.0
npm install passport@^0.7.0
npm install bcrypt@^5.1.1

# Database & ORM
npm install @neondatabase/serverless@^0.10.4
npm install drizzle-orm@^0.36.4
npm install drizzle-kit@^0.28.1

# React & UI Components
npm install @tanstack/react-query@^5.62.2
npm install framer-motion@^11.11.17
npm install lucide-react@^0.454.0
npm install recharts@^2.13.3

# Build Tools & Dev Dependencies
npm install vite@^6.0.1
npm install typescript@^5.7.2
npm install @types/node@^22.10.1
npm install tsx@^4.19.2
npm install esbuild@^0.24.0
Testing Instructions After Updates

Run the following tests in sequence:

bash# Step 1: Clean install
rm -rf node_modules package-lock.json
npm install

# Step 2: Type checking
npm run check

# Step 3: Build verification
npm run build

# Step 4: Development server test
npm run dev
# Test the following:
# - All routes load without errors
# - Authentication flows work
# - Database connections are stable
# - UI components render correctly
# - No console errors in browser

# Step 5: Production build test
npm run build
npm run start
# Verify production build works correctly
Specific Compatibility Checks

Verify these specific integrations:


Drizzle ORM: Check all database queries still work after update
Azure Identity: Test KeyVault secret retrieval
Passport.js: Verify authentication strategies still function
React Query: Ensure data fetching/caching works
Vite: Check that all plugins are compatible with Vite 6.x

Package.json Cleanup

Remove or update deprecated packages:


Consider replacing html-pdf-node with puppeteer PDF generation (you already have puppeteer)
Update mailgun-js to mailgun.js (you have both, remove the deprecated one)
Consider updating pdfkit to a more modern alternative if PDF generation issues arise

Security Best Practices

Add these security-related scripts to package.json:

json{
  "scripts": {
    "audit": "npm audit",
    "audit:fix": "npm audit fix",
    "outdated": "npm outdated"
  }
}
Post-Update Verification Checklist

Ensure the following work correctly:


 Authentication flow (login/logout)
 Session management
 Database operations (CRUD)
 PDF generation
 Email sending (SendGrid/Mailgun)
 File uploads
 WebSocket connections
 Azure KeyVault integration
 All UI components render properly
 No TypeScript errors
 Production build completes successfully

Rollback Plan

If issues occur:


Keep a backup of current package.json and package-lock.json
Test updates in a separate branch first
Update packages in groups (security critical first, then major versions)
Document any breaking changes encountered

Additional Notes

Some Radix UI components might need code adjustments after major updates
Watch for React 18.3.x specific deprecation warnings
Vite 6.x may require config file adjustments
Check Drizzle ORM migration compatibility

This systematic approach ensures security vulnerabilities are addressed while maintaining application stability.